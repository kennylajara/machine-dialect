name: Cross-Platform Tests

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags-ignore:
      - '**'  # Prevent double run when creating release tags
  release:
    types: [created]  # Run when a release is created
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Note: Linux ARM64 (aarch64) is built in publish-vm-pypi.yml but not tested here
          # due to GitHub Actions limitations (would require slow QEMU emulation)

          # Linux x86_64
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
          # Windows x86_64
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.13'
          # macOS Intel (x86_64)
          - os: macos-13
            python-version: '3.10'
          - os: macos-13
            python-version: '3.11'
          - os: macos-13
            python-version: '3.12'
          - os: macos-13
            python-version: '3.13'
          # macOS Apple Silicon (ARM64)
          - os: macos-14
            python-version: '3.10'
          - os: macos-14
            python-version: '3.11'
          - os: macos-14
            python-version: '3.12'
          - os: macos-14
            python-version: '3.13'

    steps:
    - name: Checkout code
      uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f  # v5.1.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@2fcdc490d667999e01ddbbf0f2823181beef6b39  # v1.15.0
      with:
        toolchain: stable
        cache: false

    - name: Install Rust (macOS fallback)
      if: startsWith(matrix.os, 'macos')
      run: |
        # Remove broken symlinks first
        rm -rf $HOME/.cargo/bin/*
        # Install rustup and Rust toolchain
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal
        # Source the environment
        source "$HOME/.cargo/env"
        # Install the stable toolchain explicitly
        rustup toolchain install stable
        rustup default stable
        # Add to PATH for subsequent steps
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        # Verify installation
        rustc --version
        cargo --version
      shell: bash

    - name: Cache Rust dependencies
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          machine_dialect_vm/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('machine_dialect_vm/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-


    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash
      if: runner.os != 'Windows'

    - name: Install UV (Windows)
      run: |
        irm https://astral.sh/uv/install.ps1 | iex
      shell: powershell
      if: runner.os == 'Windows'

    - name: Add UV to PATH (Unix)
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      if: runner.os != 'Windows'

    - name: Add UV to PATH (Windows)
      run: echo "$env:LOCALAPPDATA\Programs\uv" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      if: runner.os == 'Windows'

    - name: Create virtual environment
      run: |
        uv venv .venv
      shell: bash

    - name: Install dependencies (Unix)
      run: |
        source .venv/bin/activate
        uv sync --all-groups
        uv pip install -e .
      shell: bash
      if: runner.os != 'Windows'

    - name: Install dependencies (Windows)
      run: |
        # UV should automatically detect and use the .venv
        uv sync --all-groups
        # Install the package in editable mode
        uv pip install -e .
        # Explicitly install dev dependencies in case uv sync didn't work
        uv pip install pytest pytest-cov maturin mypy ruff
        # Verify installations using uv pip list instead of pip
        uv pip list | Select-String "pytest|maturin"
      shell: powershell
      if: runner.os == 'Windows'

    - name: Verify Rust installation
      run: |
        echo "Verifying Rust installation..."
        rustc --version
        cargo --version
        maturin --version || echo "maturin not yet installed"
      shell: bash
      if: runner.os != 'Windows'

    - name: Build VM (Unix)
      run: |
        source .venv/bin/activate
        # Ensure Rust is in PATH - especially important for macOS
        if [ -f "$HOME/.cargo/env" ]; then
          source "$HOME/.cargo/env"
        fi
        export PATH="$HOME/.cargo/bin:$PATH"
        chmod +x build_vm.sh
        RUSTFLAGS="" ./build_vm.sh
      shell: bash
      if: runner.os != 'Windows'

    - name: Build VM (Windows)
      run: |
        $env:RUSTFLAGS = ""
        cd machine_dialect_vm
        ..\.venv\Scripts\python.exe -m maturin develop --features pyo3
        cd ..
      shell: powershell
      if: runner.os == 'Windows'

    - name: Run tests (Unix)
      run: |
        source .venv/bin/activate
        python -m pytest -v
      shell: bash
      if: runner.os != 'Windows'

    - name: Run tests (Windows)
      run: |
        .venv\Scripts\python.exe -m pytest -v
      shell: powershell
      if: runner.os == 'Windows'

    - name: Run MyPy type checking (Unix)
      run: |
        source .venv/bin/activate
        mypy machine_dialect --strict
      shell: bash
      if: runner.os != 'Windows'

    - name: Run MyPy type checking (Windows)
      run: |
        .venv\Scripts\python.exe -m mypy machine_dialect --strict
      shell: powershell
      if: runner.os == 'Windows'

    - name: Run Ruff linting (Unix)
      run: |
        source .venv/bin/activate
        ruff check machine_dialect
      shell: bash
      if: runner.os != 'Windows'

    - name: Run Ruff linting (Windows)
      run: |
        .venv\Scripts\python.exe -m ruff check machine_dialect
      shell: powershell
      if: runner.os == 'Windows'
