start: statement ("." statement)* "."?

statement: set_stmt | say_stmt | if_stmt

set_stmt: "Set"i "`" IDENTIFIER "`" "to"i expr
say_stmt: "Say"i expr
if_stmt: "if"i expr "then"i "{" block_content "}" ("else"i "{" block_content "}")?

block_content: block_statement ("." block_statement)* "."?
block_statement: set_stmt | say_stmt | if_stmt

// Expressions with logical, comparison and arithmetic operators
expr: logical_or

logical_or: logical_and
          | logical_or "or"i logical_and -> or_op

logical_and: logical_not
           | logical_and "and"i logical_not -> and_op

logical_not: comparison
           | "not"i logical_not -> not_op

comparison: sum
          | sum "<" sum -> less_than
          | sum ">" sum -> greater_than
          | sum "<=" sum -> less_equal
          | sum ">=" sum -> greater_equal
          | sum "equals"i sum -> equals
          | sum "is"i "greater"i "than"i sum -> is_greater_than
          | sum "is"i "less"i "than"i sum -> is_less_than
          | sum "is"i "not"i "equal"i "to"i sum -> is_not_equal_to
          | sum "is"i "equal"i "to"i sum -> is_equal_to
          | sum "is"i "greater"i "than"i "or"i "equal"i "to"i sum -> is_greater_equal
          | sum "is"i "less"i "than"i "or"i "equal"i "to"i sum -> is_less_equal

sum: product
   | sum "+" product -> add
   | sum "-" product -> subtract

product: unary
       | product "*" unary -> multiply
       | product "/" unary -> divide

unary: atom
     | "-" unary -> negate

atom: NUMBER
    | WORD
    | STRING
    | "True"i -> true_lit
    | "False"i -> false_lit
    | "(" expr ")"

IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_ -]*/  // Allows letters, numbers, underscores, spaces, and hyphens
WORD: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+(\.\d+)?/
STRING: /"[^"]*"|'[^']*'/

%import common.WS
%ignore WS
