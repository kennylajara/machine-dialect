"""Test MIR to bytecode generation."""

import tempfile

import machine_dialect_vm
from machine_dialect.codegen.register_codegen import RegisterBytecodeGenerator
from machine_dialect.mir import BasicBlock
from machine_dialect.mir.mir_function import MIRFunction
from machine_dialect.mir.mir_instructions import BinaryOp, LoadConst, Return
from machine_dialect.mir.mir_module import MIRModule
from machine_dialect.mir.mir_values import Constant, Variable

# Create a simple MIR module with arithmetic
module = MIRModule("test")
func = MIRFunction("main")

# Create a basic block
block = BasicBlock("entry")

# Create variables for the computation
a = Variable("a", "int")
b = Variable("b", "int")
result = Variable("result", "int")

# Add instructions: result = 2 + 3
block.add_instruction(LoadConst(a, Constant(2)))
block.add_instruction(LoadConst(b, Constant(3)))
block.add_instruction(BinaryOp(result, a, "+", b))
block.add_instruction(Return(result))

# Add block to function
func.cfg.add_block(block)
func.cfg.set_entry_block(block)

module.functions["main"] = func

# Generate bytecode
generator = RegisterBytecodeGenerator()
bytecode_module = generator.generate(module)

print("Generated bytecode module:")
print(f"  Name: {bytecode_module.name}")
print(f"  Chunks: {len(bytecode_module.chunks)}")
for i, chunk in enumerate(bytecode_module.chunks):
    print(f"  Chunk {i}:")
    print(f"    Name: {chunk.name}")
    print(f"    Type: {chunk.chunk_type}")
    print(f"    Constants: {chunk.constants}")
    print(f"    Bytecode length: {len(chunk.bytecode)} bytes")
    print(f"    Bytecode: {chunk.bytecode.hex()}")

# Serialize bytecode
bytecode = bytecode_module.serialize()
print(f"\nSerialized bytecode: {len(bytecode)} bytes")

# Hex dump
print("\nBytecode hex dump:")
for i in range(0, len(bytecode), 16):
    hex_str = " ".join(f"{b:02x}" for b in bytecode[i : i + 16])
    ascii_str = "".join(chr(b) if 32 <= b < 127 else "." for b in bytecode[i : i + 16])
    print(f"{i:04x}: {hex_str:<48} {ascii_str}")

# Write to file and test
with tempfile.NamedTemporaryFile(suffix=".mdbc", delete=False) as f:
    f.write(bytecode)
    bytecode_path = f.name

print(f"\nBytecode written to: {bytecode_path}")

# Load and execute in VM
vm = machine_dialect_vm.RustVM()
vm.set_debug(True)
print("\nLoading bytecode...")
vm.load_bytecode(bytecode_path)
print("Executing...")
result = vm.execute()
print(f"Result: {result}")

if result == 5:
    print("✓ Test passed!")
else:
    print(f"✗ Test failed: expected 5, got {result}")
